{"version":3,"sources":["images/background.jpg","components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","Utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fa01fbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.0c39f498.jpg\";","import styled from 'styled-components'; \n\nexport const Wrapper = styled.div`\nmax-width: 1100px; \nbackground: #ebfeff; \nborder-radius: 10px; \nborder: 2px solid #0085a3;\npadding: 20px;\nbox-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n\np{\n    font-size: 1rem;\n}\n\n`\ntype ButtonWrapperProps = {\n    correct: boolean; \n    userClicked: boolean; \n}\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\ntransition: all 0.3s ease;\n\n:hover {\n    opacity: 0.8;\n}\n\nbutton {\n    cursor: pointer;\n    user-select: none; \n    font-size: 0.8rem; \n    width: 100%;\n    height: 40px;\n    margin: 5px 0; \n    background: ${({correct, userClicked}) => \ncorrect\n?'linear-gradient(90deg, #56ffa4, #59bc86)'\n: !correct && userClicked\n?'linear-gradient(90deg, #ff5656, #c16868)'\n: 'linear-gradient(90deg, #56ccff, #6eafb4)'\n};\nborder: 3px solid #fff;\nbox-shadow: 1px 2px 0px rgba(0,0,0,0.1);\nborder-radius: 10px;\ncolor: #fff;\ntext-shadow: 0px 1px 0px rgba(0,0,0,0.25);\n}\n`;","import {shuffleArray} from './Utils'\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string; \n}\nexport type QuestionState = Question & {answers: string[]}\n\nexport enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard', \n}\nexport const fetchQuizQuestions = async(amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await(await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n        ...question, \n        answers: shuffleArray([\n            ...question.incorrect_answers, \n            question.correct_answer\n        ]),\n    }))\n}","import React from 'react'; \nimport { AnswerObject} from '../App';\nimport {Wrapper, ButtonWrapper} from \"./QuestionCard.styles\";\ntype Props = {\n    question: string;\n    answers: string[]; \n    callback: (e:React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined; \n    questionNr: number;\n    totalQuestions: number; \n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions,\n}) => (\n\n    \n        <Wrapper><p className = \"number\">\n                Question: {questionNr} / {totalQuestions}\n            </p>\n            \n         <p dangerouslySetInnerHTML = {{__html: question}} />\n         <div>\n            {answers.map(answer => (\n                <ButtonWrapper \n                key = {answer}\n                correct = {userAnswer?.correctAnswer == answer}\n                userClicked = {userAnswer?.answer === answer}> \n                    <button disabled = {userAnswer? true: false} value = {answer} onClick = {callback}>\n                        <span dangerouslySetInnerHTML = {{__html: answer}} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n         </div>\n            \n            </Wrapper>\n    \n);\n\nexport default QuestionCard;","\nexport const shuffleArray = (array: any[]) =>\n[...array].sort(() => Math.random() - 0.5);","import styled, { createGlobalStyle} from 'styled-components';\nimport BGImage from './images/background.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height: 100%;\n}\n\nbody {\n    background-image: url(${BGImage});\n    background-size: cover; \n    margin: 0;\n    padding: 0 20px; \n    display: flex; \n    justify-content: center; \n}\n\n*{\n    box-sizing: border-box; \n}\n\n`;\n\nexport const Wrapper = styled.div` \ndisplay: flex; \nflex-direction: column;\nalign-items: center; \n\n> p {\n    color: #fff; \n}\n.score {\n    color: #fff; \n    font-size: 2rem;\n    margin: 0; \n}\n\nh1 {\n    color: #fff; \n   \n   \n  \n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px; \n    text-align: center; \n    \n}\n.start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc9);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n    border-radius: 10px;\n    height: 40px; \n    margin: 20px 0; \n    padding: 0 40px; \n}\n\n.start {\n    max-width: 200px; \n}\n\n`","import React, {useState} from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport {fetchQuizQuestions} from './API';\nimport { QuestionState, Difficulty} from './API';\nimport {GlobalStyle, Wrapper} from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;  \n  correctAnswer: string; \n}\n\nconst App = () => {\n  const TOTAL_QUESTIONS = 10; \n\n  const [loading, setLoading] = useState(false); \n  const [questions, setQuestions] = useState<QuestionState[]>([]); \n  const [number, setNumber] =useState(0); \n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]); \n  const [score, setScore] = useState(0); \n  const [gameOver, setGameOver] = useState(true); \n\n  console.log(questions);\n\n  const startTrivia = async() =>{\n    setLoading(true);\n    setGameOver(false); \n\n    \n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0); \n    setUserAnswers([]);\n    setNumber(0); \n    setLoading(false); \n\n  }\n\n  const checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) => {\n      if(!gameOver) {\n        //users answer\n        const answer = e.currentTarget.value; \n        //check answer against correct value\n        const correct = questions[number].correct_answer ===answer; \n        //Add score if answer is correct\n        if(correct) setScore(prev => prev +1);\n        //save the answer in the array for user answer\n        const answerObject = {\n          question: questions[number].question, \n          answer,\n          correct,\n          correctAnswer: questions[number].correct_answer,\n        };\n        setUserAnswers((prev) => [...prev, answerObject]);\n\n      }\n  }\n\n  const nextQuestion = () => {\n    //move on to next question if not the last\n    const nextQuestion = number + 1; \n    if(nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    }else {\n      setNumber(nextQuestion);\n    }\n\n  }\n\n\n\n  return (\n    <>\n    <GlobalStyle />\n   <Wrapper>\n      <h1> React App Quiz</h1>\n\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className = \"start\" onClick = {startTrivia}>\n        Start \n      </button>\n  ): null}\n      {!gameOver ? <p className='score'>Score: {score}</p>: null}\n     \n      {loading && <p>Loading questions ...</p>}\n     \n       {!loading && !gameOver && (\n         <QuestionCard\n            questionNr={number +1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question = {questions[number].question}\n            answers = {questions[number].answers}\n            userAnswer= {userAnswers ? userAnswers[number]: undefined}\n            callback = {checkAnswer}\n            />\n       )}\n\n      {!gameOver && !loading && userAnswers.length === number +1 && number !== TOTAL_QUESTIONS - 1 ? (\n         <button className = \"next\" onClick = {nextQuestion}>\n         Next Question\n       </button>\n \n      ): null }\n      \n     \n      \n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}